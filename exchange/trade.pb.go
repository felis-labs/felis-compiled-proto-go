// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: exchange/trade.proto

package exchange

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TradeEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Exchange       string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Base           string                 `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	Quote          string                 `protobuf:"bytes,3,opt,name=quote,proto3" json:"quote,omitempty"`
	Direction      string                 `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
	Price          float64                `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	Volume         float64                `protobuf:"fixed64,6,opt,name=volume,proto3" json:"volume,omitempty"`
	EventTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=event_timestamp,json=eventTimestamp,proto3" json:"event_timestamp,omitempty"`
	PriceUsd       float64                `protobuf:"fixed64,8,opt,name=price_usd,json=priceUsd,proto3" json:"price_usd,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TradeEvent) Reset() {
	*x = TradeEvent{}
	mi := &file_exchange_trade_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeEvent) ProtoMessage() {}

func (x *TradeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_exchange_trade_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeEvent.ProtoReflect.Descriptor instead.
func (*TradeEvent) Descriptor() ([]byte, []int) {
	return file_exchange_trade_proto_rawDescGZIP(), []int{0}
}

func (x *TradeEvent) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *TradeEvent) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *TradeEvent) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *TradeEvent) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *TradeEvent) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeEvent) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TradeEvent) GetEventTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTimestamp
	}
	return nil
}

func (x *TradeEvent) GetPriceUsd() float64 {
	if x != nil {
		return x.PriceUsd
	}
	return 0
}

var File_exchange_trade_proto protoreflect.FileDescriptor

const file_exchange_trade_proto_rawDesc = "" +
	"\n" +
	"\x14exchange/trade.proto\x12\acoincap\x1a\x1fgoogle/protobuf/timestamp.proto\"\x80\x02\n" +
	"\n" +
	"TradeEvent\x12\x1a\n" +
	"\bexchange\x18\x01 \x01(\tR\bexchange\x12\x12\n" +
	"\x04base\x18\x02 \x01(\tR\x04base\x12\x14\n" +
	"\x05quote\x18\x03 \x01(\tR\x05quote\x12\x1c\n" +
	"\tdirection\x18\x04 \x01(\tR\tdirection\x12\x14\n" +
	"\x05price\x18\x05 \x01(\x01R\x05price\x12\x16\n" +
	"\x06volume\x18\x06 \x01(\x01R\x06volume\x12C\n" +
	"\x0fevent_timestamp\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x0eeventTimestamp\x12\x1b\n" +
	"\tprice_usd\x18\b \x01(\x01R\bpriceUsdB\x18Z\x16./compiled-go/exchangeb\x06proto3"

var (
	file_exchange_trade_proto_rawDescOnce sync.Once
	file_exchange_trade_proto_rawDescData []byte
)

func file_exchange_trade_proto_rawDescGZIP() []byte {
	file_exchange_trade_proto_rawDescOnce.Do(func() {
		file_exchange_trade_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_exchange_trade_proto_rawDesc), len(file_exchange_trade_proto_rawDesc)))
	})
	return file_exchange_trade_proto_rawDescData
}

var file_exchange_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_exchange_trade_proto_goTypes = []any{
	(*TradeEvent)(nil),            // 0: coincap.TradeEvent
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_exchange_trade_proto_depIdxs = []int32{
	1, // 0: coincap.TradeEvent.event_timestamp:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_exchange_trade_proto_init() }
func file_exchange_trade_proto_init() {
	if File_exchange_trade_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_exchange_trade_proto_rawDesc), len(file_exchange_trade_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_exchange_trade_proto_goTypes,
		DependencyIndexes: file_exchange_trade_proto_depIdxs,
		MessageInfos:      file_exchange_trade_proto_msgTypes,
	}.Build()
	File_exchange_trade_proto = out.File
	file_exchange_trade_proto_goTypes = nil
	file_exchange_trade_proto_depIdxs = nil
}
